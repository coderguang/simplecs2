!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACCOUNT_IS_USING	myDB/dbcpp/DBErr.h	/^static const int ACCOUNT_IS_USING=6300;$/;"	v
ACCOUNT_PASSWD_ERROR	myDB/dbcpp/DBErr.h	/^static const int ACCOUNT_PASSWD_ERROR=6200;$/;"	v
ALL	include/BroadcastInterface.h	/^static const int ALL=3; $/;"	v
BACKLOG	lanuch/config.h	/^const int BACKLOG=10;$/;"	v
BLUE	include/BroadcastInterface.h	/^static const int BLUE=1;$/;"	v
BROARDCAST_INTERFACE_H_	include/BroadcastInterface.h	2;"	d
CheckAccount	myDB/dbcpp/DBConnections.cpp	/^int DBConnections::CheckAccount(string account){$/;"	f	class:DBConnections
CheckAccount	myDB/dbcpp/DBInterface.h	/^int CheckAccount(string account){$/;"	f
Close	myDB/dbcpp/DBConnections.cpp	/^	void DBConnections::Close(){$/;"	f	class:DBConnections
ConnType	myDB/dbcpp/DBConnections.h	/^enum ConnType{REGIT,LANUCH,SECURE,RESULT,GETRESULT};$/;"	g
DBCONNECTIONS_H_	myDB/dbcpp/DBConnections.h	2;"	d
DBClose	myDB/dbcpp/DBConnections.cpp	/^void DBConnections::DBClose(){$/;"	f	class:DBConnections
DBClose	myDB/dbcpp/DBInterface.h	/^static void DBClose(){$/;"	f
DBConnections	myDB/dbcpp/DBConnections.cpp	/^DBConnections::DBConnections(){$/;"	f	class:DBConnections
DBConnections	myDB/dbcpp/DBConnections.h	/^class DBConnections$/;"	c
DBERROR	myDB/dbcpp/DBErr.h	/^static const int DBERROR=5000;$/;"	v
DBINTERFACE_H_	myDB/dbcpp/DBInterface.h	2;"	d
DBLog	log/LogConstant.h	/^enum LogType{DBLog,LanuchLog,RegitLog,UpdatePasswdLog,ResultLog,GetResultLog};$/;"	e	enum:LogType
DB_CONSTANT_H_	myDB/dbcpp/DBConstant.h	2;"	d
DB_ERR_H_	myDB/dbcpp/DBErr.h	2;"	d
DEBUG	log/LogConstant.h	/^enum Level{FATAL,ERR,WARN,INFO,DEBUG};$/;"	e	enum:Level
DEBUGFLAG	log/LogConstant.h	/^static const bool DEBUGFLAG=true;$/;"	v
ERR	log/LogConstant.h	/^enum Level{FATAL,ERR,WARN,INFO,DEBUG};$/;"	e	enum:Level
ERRORFLAG	log/LogConstant.h	/^static const bool ERRORFLAG=true;$/;"	v
ERR_IDENTITY	myDB/dbcpp/DBErr.h	/^static const int ERR_IDENTITY=6100;$/;"	v
ExitLanuch	myDB/dbcpp/DBConnections.cpp	/^int DBConnections::ExitLanuch(int id){$/;"	f	class:DBConnections
ExitLanuch	myDB/dbcpp/DBInterface.h	/^void ExitLanuch(int id){$/;"	f
FATAL	log/LogConstant.h	/^enum Level{FATAL,ERR,WARN,INFO,DEBUG};$/;"	e	enum:Level
FATALFLAG	log/LogConstant.h	/^static const bool FATALFLAG=true; $/;"	v
ForgetPasswd	myDB/dbcpp/DBConnections.cpp	/^int DBConnections::ForgetPasswd(string account,string email,int question,string answer){$/;"	f	class:DBConnections
ForgetPasswd	myDB/dbcpp/DBInterface.h	/^int ForgetPasswd(string account,string email,int questionID,string answer){$/;"	f
FreeResult	myDB/dbcpp/DBConnections.cpp	/^void DBConnections::FreeResult(MYSQL_RES **res){$/;"	f	class:DBConnections
GETRESULT	myDB/dbcpp/DBConnections.h	/^enum ConnType{REGIT,LANUCH,SECURE,RESULT,GETRESULT};$/;"	e	enum:ConnType
GetFree	myDB/dbcpp/DBConnections.cpp	/^MMYSQL *DBConnections::GetFree(ConnType type){$/;"	f	class:DBConnections
GetInstance	log/Logger.cpp	/^	Logger *Logger::GetInstance(){$/;"	f	class:Logger
GetInstance	myDB/dbcpp/DBConnections.cpp	/^DBConnections *DBConnections::GetInstance(){$/;"	f	class:DBConnections
GetResult	myDB/dbcpp/DBConnections.cpp	/^int DBConnections::GetResult(int resultID,struct ResultAll &resultA){$/;"	f	class:DBConnections
GetResult	myDB/dbcpp/DBInterface.h	/^static int GetResult(int resultID,ResultAll &result){$/;"	f
GetResultLog	log/LogConstant.h	/^enum LogType{DBLog,LanuchLog,RegitLog,UpdatePasswdLog,ResultLog,GetResultLog};$/;"	e	enum:LogType
HAD_REGIT	myDB/dbcpp/DBErr.h	/^static const int HAD_REGIT=6000;$/;"	v
INFO	log/LogConstant.h	/^enum Level{FATAL,ERR,WARN,INFO,DEBUG};$/;"	e	enum:Level
INFOFLAG	log/LogConstant.h	/^static const bool INFOFLAG=true;$/;"	v
IN_GAME	SerStruct.h	/^enum Status{IN_ROOM,IN_GAME,IN_RESULT};$/;"	e	enum:Status
IN_RESULT	SerStruct.h	/^enum Status{IN_ROOM,IN_GAME,IN_RESULT};$/;"	e	enum:Status
IN_ROOM	SerStruct.h	/^enum Status{IN_ROOM,IN_GAME,IN_RESULT};$/;"	e	enum:Status
Init	log/Logger.cpp	/^void Logger::Init(){$/;"	f	class:Logger
InitLog	log/LogInterface.h	/^static void InitLog(){$/;"	f
InsertResult	myDB/dbcpp/DBConnections.cpp	/^int DBConnections::InsertResult(struct ResultAll &resultA){ $/;"	f	class:DBConnections
InsertResult	myDB/dbcpp/DBInterface.h	/^int InsertResult(ResultAll &result){$/;"	f
LANUCH	myDB/dbcpp/DBConnections.h	/^enum ConnType{REGIT,LANUCH,SECURE,RESULT,GETRESULT};$/;"	e	enum:ConnType
LOG_CONSTANT_H_	log/LogConstant.h	2;"	d
LOG_INTERFACE_H_	log/LogInterface.h	2;"	d
Lanuch	myDB/dbcpp/DBConnections.cpp	/^int DBConnections::Lanuch(string account,string passwd,string ip,struct Lanuch &lanResult){$/;"	f	class:DBConnections
LanuchAccount	myDB/dbcpp/DBInterface.h	/^int LanuchAccount(string account,string passwd,string ip,Lanuch &lanResult){$/;"	f
LanuchLog	log/LogConstant.h	/^enum LogType{DBLog,LanuchLog,RegitLog,UpdatePasswdLog,ResultLog,GetResultLog};$/;"	e	enum:LogType
Level	log/LogConstant.h	/^enum Level{FATAL,ERR,WARN,INFO,DEBUG};$/;"	g
Log	log/LogInterface.h	/^static void Log(LogType type,Level level,string msg){$/;"	f
Log	log/Logger.cpp	/^	void Logger::Log(LogType type,Level level,string &msg){$/;"	f	class:Logger
LogDBMsg	log/Logger.cpp	/^	void Logger::LogDBMsg(){$/;"	f	class:Logger
LogGetResultMsg	log/Logger.cpp	/^	void Logger::LogGetResultMsg(){$/;"	f	class:Logger
LogLanuchMsg	log/Logger.cpp	/^	void Logger::LogLanuchMsg(){$/;"	f	class:Logger
LogMsg	log/Logger.cpp	/^	void Logger::LogMsg(LogType type,string &msg,string typeMsg){$/;"	f	class:Logger
LogRegitMsg	log/Logger.cpp	/^	void Logger::LogRegitMsg(){$/;"	f	class:Logger
LogResultMsg	log/Logger.cpp	/^	void Logger::LogResultMsg(){$/;"	f	class:Logger
LogType	log/LogConstant.h	/^enum LogType{DBLog,LanuchLog,RegitLog,UpdatePasswdLog,ResultLog,GetResultLog};$/;"	g
LogUpdatePasswdMsg	log/Logger.cpp	/^	void Logger::LogUpdatePasswdMsg(){$/;"	f	class:Logger
Logger	log/Logger.cpp	/^	Logger::Logger(){$/;"	f	class:Logger
Logger	log/Logger.h	/^class Logger{$/;"	c
MAX_USER	lanuch/config.h	/^const int MAX_USER=128;$/;"	v
MLANUCH_H_	lanuch/mLanuch.h	2;"	d
MMYSQL	myDB/dbcpp/DBConstant.h	/^struct MMYSQL{$/;"	s
MSG_SIZE	lanuch/config.h	/^const int MSG_SIZE=2048;\/\/max msg$/;"	v
M_LOG_H_	log/Logger.h	2;"	d
MyQuery	myDB/dbcpp/DBConnections.cpp	/^int DBConnections::MyQuery(ConnType type,string sql,MYSQL_RES **res){$/;"	f	class:DBConnections
NET_CONSTANT_	lanuch/config.h	2;"	d
NO_FREE_CONN	myDB/dbcpp/DBErr.h	/^static const int NO_FREE_CONN=5030;$/;"	v
PORT	lanuch/config.h	/^const int PORT=9201;\/\/server open  port$/;"	v
RED	include/BroadcastInterface.h	/^static const int RED=2;$/;"	v
REGIT	myDB/dbcpp/DBConnections.h	/^enum ConnType{REGIT,LANUCH,SECURE,RESULT,GETRESULT};$/;"	e	enum:ConnType
RESULT	myDB/dbcpp/DBConnections.h	/^enum ConnType{REGIT,LANUCH,SECURE,RESULT,GETRESULT};$/;"	e	enum:ConnType
RESULT_NOT_EXIST	myDB/dbcpp/DBErr.h	/^static const int RESULT_NOT_EXIST=7000;$/;"	v
RegitAccount	myDB/dbcpp/DBConnections.cpp	/^int DBConnections::RegitAccount(string account,string passwd,string email,string name,int question,string answer){$/;"	f	class:DBConnections
RegitAccount	myDB/dbcpp/DBInterface.h	/^int RegitAccount(string account,string passwd,string email,string name,int questionID,string answer){$/;"	f
RegitLog	log/LogConstant.h	/^enum LogType{DBLog,LanuchLog,RegitLog,UpdatePasswdLog,ResultLog,GetResultLog};$/;"	e	enum:LogType
ResetPasswd	myDB/dbcpp/DBConnections.cpp	/^int DBConnections::ResetPasswd(string account,string newPasswd){$/;"	f	class:DBConnections
ResetPasswd	myDB/dbcpp/DBInterface.h	/^int ResetPasswd(string account,string newPasswd){$/;"	f
ResultLog	log/LogConstant.h	/^enum LogType{DBLog,LanuchLog,RegitLog,UpdatePasswdLog,ResultLog,GetResultLog};$/;"	e	enum:LogType
SECURE	myDB/dbcpp/DBConnections.h	/^enum ConnType{REGIT,LANUCH,SECURE,RESULT,GETRESULT};$/;"	e	enum:ConnType
SER_STRUCT_H_	SerStruct.h	2;"	d
SQL_NULL	myDB/dbcpp/DBErr.h	/^static const int SQL_NULL=5010;$/;"	v
SerList	SerStruct.h	/^class SerList{$/;"	c
SerNum	SerStruct.h	/^class SerNum{$/;"	c
SerStatus	SerStruct.h	/^class SerStatus{$/;"	c
Status	SerStruct.h	/^enum Status{IN_ROOM,IN_GAME,IN_RESULT};$/;"	g
TYPE_ERROR	myDB/dbcpp/DBErr.h	/^static const int TYPE_ERROR=5020;$/;"	v
UNKNOW	myDB/dbcpp/DBErr.h	/^static const int UNKNOW=-1;$/;"	v
UpdatePasswdLog	log/LogConstant.h	/^enum LogType{DBLog,LanuchLog,RegitLog,UpdatePasswdLog,ResultLog,GetResultLog};$/;"	e	enum:LogType
WARN	log/LogConstant.h	/^enum Level{FATAL,ERR,WARN,INFO,DEBUG};$/;"	e	enum:Level
WARNFLAG	log/LogConstant.h	/^static const bool WARNFLAG=true;$/;"	v
blue	SerStruct.h	/^		int blue;$/;"	m	class:SerNum
clientNum	lanuch/server.cpp	/^SerNum clientNum;$/;"	v
conn	myDB/dbcpp/DBConstant.h	/^	MYSQL *conn;$/;"	m	struct:MMYSQL
connfd	SerStruct.h	/^		int connfd;$/;"	m	class:SerList
counter	SerStruct.h	/^		int counter;$/;"	m	class:SerNum
database	myDB/dbcpp/DBConstant.h	/^const string database = "simplecs";$/;"	v
dbFile	log/Logger.h	/^	string dbFile="log\/dbLog";$/;"	m	class:Logger
dbInstance	myDB/dbcpp/DBConnections.cpp	/^DBConnections *DBConnections::dbInstance=nullptr;$/;"	m	class:DBConnections	file:
dbInstance	myDB/dbcpp/DBConnections.h	/^	static DBConnections *dbInstance;$/;"	m	class:DBConnections
dbLog	log/Logger.h	/^	ofstream dbLog;$/;"	m	class:Logger
dbMutex	log/Logger.h	/^	mutex dbMutex;$/;"	m	class:Logger
dbQueue	log/Logger.h	/^	queue<string> dbQueue;$/;"	m	class:Logger
dbStart	log/Logger.h	/^	bool dbStart;$/;"	m	class:Logger
dbStartMutex	log/Logger.h	/^	mutex dbStartMutex;$/;"	m	class:Logger
dbStartVar	log/Logger.h	/^	condition_variable dbStartVar;$/;"	m	class:Logger
dbThread	log/Logger.h	/^	thread dbThread;$/;"	m	class:Logger
dbVar	log/Logger.h	/^	condition_variable dbVar;$/;"	m	class:Logger
flag	myDB/dbcpp/DBConstant.h	/^	int flag;\/\/flag is it free,0 is free,1 is busy $/;"	m	struct:MMYSQL
gameStatus	lanuch/server.cpp	/^SerStatus gameStatus;$/;"	v
getResult	myDB/dbcpp/DBConnections.h	/^	MMYSQL *getResult;$/;"	m	class:DBConnections
getResultFile	log/Logger.h	/^	string getResultFile="log\/getResultLog";$/;"	m	class:Logger
getResultLog	log/Logger.h	/^	ofstream getResultLog;$/;"	m	class:Logger
getResultMutex	log/Logger.h	/^	mutex getResultMutex;$/;"	m	class:Logger
getResultPasswd	myDB/dbcpp/DBConstant.h	/^const string getResultPasswd = "getResulter";$/;"	v
getResultQueue	log/Logger.h	/^	queue<string> getResultQueue;$/;"	m	class:Logger
getResultStart	log/Logger.h	/^	bool getResultStart;$/;"	m	class:Logger
getResultStartMutex	log/Logger.h	/^	mutex getResultStartMutex;$/;"	m	class:Logger
getResultStartVar	log/Logger.h	/^	condition_variable getResultStartVar;$/;"	m	class:Logger
getResultThread	log/Logger.h	/^	thread getResultThread;$/;"	m	class:Logger
getResultUser	myDB/dbcpp/DBConstant.h	/^const string getResultUser = "getResultUser";$/;"	v
getResultVar	log/Logger.h	/^	condition_variable getResultVar;$/;"	m	class:Logger
id	SerStruct.h	/^		int id;$/;"	m	class:SerList
initDB	myDB/dbcpp/DBConnections.cpp	/^void DBConnections::initDB(){ $/;"	f	class:DBConnections
lanuch	myDB/dbcpp/DBConnections.h	/^	MMYSQL *lanuch;$/;"	m	class:DBConnections
lanuchFile	log/Logger.h	/^	string lanuchFile="log\/lanuchLog";$/;"	m	class:Logger
lanuchLog	log/Logger.h	/^	ofstream lanuchLog;$/;"	m	class:Logger
lanuchMutex	log/Logger.h	/^	mutex lanuchMutex;$/;"	m	class:Logger
lanuchPasswd	myDB/dbcpp/DBConstant.h	/^const string lanuchPasswd = "lanucher";$/;"	v
lanuchQueue	log/Logger.h	/^	queue<string> lanuchQueue;$/;"	m	class:Logger
lanuchStart	log/Logger.h	/^	bool lanuchStart;$/;"	m	class:Logger
lanuchStartMutex	log/Logger.h	/^	mutex lanuchStartMutex;$/;"	m	class:Logger
lanuchStartVar	log/Logger.h	/^	condition_variable lanuchStartVar;$/;"	m	class:Logger
lanuchThread	log/Logger.h	/^	thread lanuchThread;$/;"	m	class:Logger
lanuchUser	myDB/dbcpp/DBConstant.h	/^const string lanuchUser = "lanuchUser";$/;"	v
lanuchVar	log/Logger.h	/^	condition_variable lanuchVar;$/;"	m	class:Logger
logInstance	log/Logger.cpp	/^	Logger *Logger::logInstance;$/;"	m	class:Logger	file:
logInstance	log/Logger.h	/^	static Logger *logInstance;$/;"	m	class:Logger
mBroadcast	include/BroadcastInterface.h	/^void mBroadcast(int type,Message *msg,size_t len){$/;"	f
mExit	log/Logger.h	/^	bool mExit;\/\/to decide the thread should exit$/;"	m	class:Logger
mLanuchGame	lanuch/mLanuch.h	/^void mLanuchGame(int connfd,string ip,int id){$/;"	f
main	lanuch/server.cpp	/^int main(int argc,char **argv){$/;"	f
main	log/LogProc.cpp	/^int main(int argc,char **argv){$/;"	f
main	myDB/dbcpp/dbI.cpp	/^int main()$/;"	f
party	SerStruct.h	/^		int party;$/;"	m	class:SerList
ptr	log/LogInterface.h	/^static shmLogMsg *ptr;$/;"	v
red	SerStruct.h	/^		int red;	$/;"	m	class:SerNum
regit	myDB/dbcpp/DBConnections.h	/^	MMYSQL *regit;$/;"	m	class:DBConnections
regitFile	log/Logger.h	/^	string regitFile="log\/regitLog";$/;"	m	class:Logger
regitLog	log/Logger.h	/^	ofstream regitLog;$/;"	m	class:Logger
regitMutex	log/Logger.h	/^	mutex regitMutex;$/;"	m	class:Logger
regitPasswd	myDB/dbcpp/DBConstant.h	/^const string regitPasswd="regiter";$/;"	v
regitQueue	log/Logger.h	/^	queue<string> regitQueue;$/;"	m	class:Logger
regitStart	log/Logger.h	/^	bool regitStart;$/;"	m	class:Logger
regitStartMutex	log/Logger.h	/^	mutex regitStartMutex;$/;"	m	class:Logger
regitStartVar	log/Logger.h	/^	condition_variable regitStartVar;$/;"	m	class:Logger
regitThread	log/Logger.h	/^	thread regitThread;$/;"	m	class:Logger
regitUser	myDB/dbcpp/DBConstant.h	/^const string regitUser="regitUser";$/;"	v
regitVar	log/Logger.h	/^	condition_variable regitVar;$/;"	m	class:Logger
result	myDB/dbcpp/DBConnections.h	/^	MMYSQL *result;$/;"	m	class:DBConnections
resultFile	log/Logger.h	/^	string resultFile="log\/resultLog";$/;"	m	class:Logger
resultLog	log/Logger.h	/^	ofstream resultLog;$/;"	m	class:Logger
resultMutex	log/Logger.h	/^	mutex resultMutex;$/;"	m	class:Logger
resultPasswd	myDB/dbcpp/DBConstant.h	/^const string resultPasswd = "resulter";$/;"	v
resultQueue	log/Logger.h	/^	queue<string> resultQueue;$/;"	m	class:Logger
resultStart	log/Logger.h	/^	bool resultStart;$/;"	m	class:Logger
resultStartMutex	log/Logger.h	/^	mutex resultStartMutex;$/;"	m	class:Logger
resultStartVar	log/Logger.h	/^	condition_variable resultStartVar;$/;"	m	class:Logger
resultThread	log/Logger.h	/^	thread resultThread;$/;"	m	class:Logger
resultUser	myDB/dbcpp/DBConstant.h	/^const string resultUser = "resultUser";$/;"	v
resultVar	log/Logger.h	/^	condition_variable resultVar;$/;"	m	class:Logger
secure	myDB/dbcpp/DBConnections.h	/^	MMYSQL *secure;$/;"	m	class:DBConnections
securePasswd	myDB/dbcpp/DBConstant.h	/^const string securePasswd = "securer";$/;"	v
secureUser	myDB/dbcpp/DBConstant.h	/^const string secureUser = "secureUser";$/;"	v
server	myDB/dbcpp/DBConstant.h	/^const string server="localhost";$/;"	v
server_args	myDB/dbcpp/DBConstant.h	/^char* server_args[] = {$/;"	v
server_groups	myDB/dbcpp/DBConstant.h	/^char* server_groups[] = {$/;"	v
status	SerStruct.h	/^		Status status;$/;"	m	class:SerStatus
updatePasswdFile	log/Logger.h	/^	string updatePasswdFile="log\/updatePasswdLog";$/;"	m	class:Logger
updatePasswdLog	log/Logger.h	/^	ofstream updatePasswdLog;$/;"	m	class:Logger
updatePasswdMutex	log/Logger.h	/^	mutex updatePasswdMutex;$/;"	m	class:Logger
updatePasswdQueue	log/Logger.h	/^	queue<string> updatePasswdQueue;$/;"	m	class:Logger
updatePasswdStart	log/Logger.h	/^	bool updatePasswdStart;$/;"	m	class:Logger
updatePasswdStartMutex	log/Logger.h	/^	mutex updatePasswdStartMutex;$/;"	m	class:Logger
updatePasswdStartVar	log/Logger.h	/^	condition_variable updatePasswdStartVar;$/;"	m	class:Logger
updatePasswdThread	log/Logger.h	/^	thread updatePasswdThread;$/;"	m	class:Logger
updatePasswdVar	log/Logger.h	/^	condition_variable updatePasswdVar;$/;"	m	class:Logger
~Logger	log/Logger.cpp	/^	Logger::~Logger(){$/;"	f	class:Logger
